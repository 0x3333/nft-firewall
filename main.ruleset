flush ruleset

table ip filter {
    chain INPUT {
        type filter hook input priority 0; policy drop;

        counter jump u-before-logging-input
        counter jump u-before-input
        counter jump u-after-input
        counter jump u-after-logging-input
        counter jump u-reject-input
        counter jump u-track-input
    }

    chain OUTPUT {
        type filter hook output priority 0; policy accept;

        counter jump u-before-logging-output
        counter jump u-before-output
        counter jump u-after-output
        counter jump u-after-logging-output
        counter jump u-reject-output
        counter jump u-track-output
    }

    chain FORWARD {
        type filter hook forward priority 0; policy drop;

        counter jump u-before-logging-forward
        counter jump u-before-forward
        counter jump u-after-forward
        counter jump u-after-logging-forward
        counter jump u-reject-forward
        counter jump u-track-forward
    }

    chain u-before-input {
        # allow all on loopback
        iifname lo counter accept

        # quickly process packets for which we already have a connection
        ct state related,established counter accept

        # drop INVALID packets (logs these in loglevel medium and higher)
        ct state invalid counter jump u-logging-deny
        ct state invalid counter drop

        # ok icmp codes for INPUT
        icmp type { destination-unreachable, time-exceeded, parameter-problem, echo-request, echo-reply } accept

        # allow dhcp client to work
        udp sport 67 udp dport 68 counter accept

        # u-not-local
        counter jump u-not-local

        # allow MULTICAST mDNS for service discovery (be sure the MULTICAST above is uncommented)
        ip daddr 224.0.0.251     udp dport 5353 counter accept

        # allow MULTICAST UPnP for service discovery (be sure the MULTICAST above is uncommented)
        ip daddr 239.255.255.250 udp dport 1900 counter accept

        # u-user-input
        counter jump u-user-input
    }

    chain u-before-output {
        # allow all on loopback
        oifname lo counter accept

        # quickly process packets for which we already have a connection
        ct state related,established counter accept

        # u-user-output
        counter jump u-user-output
    }

    chain u-before-forward {
        # quickly process packets for which we already have a connection
        ct state related,established counter accept

        # ok icmp code for FORWARD
        icmp type { destination-unreachable, time-exceeded, parameter-problem, echo-request, echo-reply } accept

        # u-user-forward
        counter jump u-user-forward
    }

    chain u-after-input {
        # don't log noisy services by default
        udp dport { 67, 68, 137, 138 }   jump u-skip-to-policy-input
        tcp dport { 139, 445 }           jump u-skip-to-policy-input

        # don't log noisy broadcast
        fib daddr type broadcast counter jump u-skip-to-policy-input
    }

    chain u-after-output {
    }

    chain u-after-forward {
    }

    chain u-reject-input {
    }

    chain u-reject-output {
    }

    chain u-reject-forward {
    }

    chain u-track-input {
    }

    chain u-track-output {
        # Counter output
        meta l4proto {tcp, udp} ct state new counter accept
    }

    chain u-track-forward {
    }

    chain u-skip-to-policy-input {
        counter drop
    }

    chain u-skip-to-policy-output {
        counter accept
    }

    chain u-skip-to-policy-forward {
        counter drop
    }

    chain u-not-local {
        # if LOCAL, MULTICAST, BROADCAST return
        fib daddr type { local, multicast, broadcast } counter return

        # all other non-local packets are dropped
        limit rate 3/minute burst 10 packets counter jump u-logging-deny
        counter drop
    }

    chain u-logging-allow {
    }

    chain u-user-input {
    }

    chain u-user-output {
    }

    chain u-user-forward {
    }

    chain u-before-logging-input {
    }
    chain u-before-logging-output {
    }
    chain u-before-logging-forward {
    }

    chain u-after-logging-input {
    }
    chain u-after-logging-output {
    }
    chain u-after-logging-forward {
    }

    chain u-logging-deny {
    }
    chain u-logging-allow {
    }
}

#
# User rules
include "./user.ruleset"

#
#Logging
include "./log.ruleset"
